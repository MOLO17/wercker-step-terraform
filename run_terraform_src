#!/bin/bash

_program()
{
    core_usesIn curl
    core_dependency_requires '*' 7za
    run_terraform()
    {
        local curl_httpStatusCode
        local TMP_FILE
        local responseFile
        local TMP_FOLDER
        local terraformPath

        core_temporaryFiles_newFileToRemoveOnExit
        responseFile=$TMP_FILE
        curl_http none '' GET "http://dl.bintray.com/mitchellh/terraform/terraform_0.6.1_linux_386.zip"  "$responseFile"

        core_temporaryFiles_newFolderToRemoveOnExit
        terraformPath="$TMP_FOLDER"
        cd $terraformPath
        7za e "$responseFile"
        cd -
        export PATH="$terraformPath:$PATH"

        AWS_ACCESS_KEY_ID="$run_terraform_access_key" AWS_SECRET_ACCESS_KEY="$run_terraform_secret_key" \
        terraform remote config -backend=S3 -backend-config="bucket=$run_terraform_state_stor_bucket" -backend-config="key=$run_terraform_state_stor_key" -backend-config="region=$run_terraform_state_stor_bucket_region"

        case "$run_terraform_action" in
            plan)

            saved_plan_out=""
            core_variable_isUnsetOrEmpty "run_terraform_out_file" || saved_plan_out="-out=$run_terraform_out_file"

            AWS_ACCESS_KEY_ID="$run_terraform_access_key" AWS_SECRET_ACCESS_KEY="$run_terraform_secret_key" \
            TF_VAR_access_key="$run_terraform_access_key" TF_VAR_secret_key="$run_terraform_secret_key" \
            TF_VAR_db_user="$run_terraform_db_user" TF_VAR_db_password="$run_terraform_db_user" \
            TF_VAR_api_ssl_certificate_id="$run_terraform_api_ssl_certificate_id" terraform plan $saved_plan_out

        ;;
            apply)

            plan=""
            core_variable_isUnsetOrEmpty "run_terraform_in_file" || plan=" $run_terraform_in_file"

            AWS_ACCESS_KEY_ID="$run_terraform_access_key" AWS_SECRET_ACCESS_KEY="$run_terraform_secret_key" \
            TF_VAR_access_key="$run_terraform_access_key" TF_VAR_secret_key="$run_terraform_secret_key" \
            TF_VAR_db_user="$run_terraform_db_user" TF_VAR_db_password="$run_terraform_db_password" \
            TF_VAR_api_ssl_certificate_id="$run_terraform_api_ssl_certificate_id" terraform apply $plan

            AWS_ACCESS_KEY_ID="$run_terraform_access_key" AWS_SECRET_ACCESS_KEY="$run_terraform_secret_key" terraform remote push
        ;;
        esac


    }

}

_program_name='run_terraform'
_program_version='unversioned'
_program_package_or_build=''
_program_path="$([ "${_program_fattening_program_path+set}" = 'set' ] && printf '%s\n' "$_program_fattening_program_path" || ([ "${0%/*}" = "${0}" ] && printf '%s\n' '.' || printf '%s\n' "${0%/*}"))"
_program_libPath="${_program_path}/lib"
_program_etcPath="${_program_path}/etc"
_program_varPath="${_program_path}/var"
_program_entrypoint='run_terraform'


_program_commandLine_parseInitialise()
{
    true
}

_program_commandLine_helpMessage()
{
    _program_commandLine_helpMessage_usage="[OPTION]... -- [PACKAGE FILE]..."
    _program_commandLine_helpMessage_description="Run Terraform"
    _program_commandLine_helpMessage_options="
    --access_key ACCESS_KEY
    --secret_key SECRET_KEY
    --state_bucket STATE_BUCKET
    --state_key STATE_KEY
    --db_user DB_USER
    --db_password DB_PASSWORD
    --api_ssl_certificate_id SSL_CERTIFICATE_ID
    "
    _program_commandLine_helpMessage_optionsSpacing='     '
    _program_commandLine_helpMessage_configurationKeys="
"
    _program_commandLine_helpMessage_examples="
    ${_program_name} --access_key ACCESS_KEY --secret_key SECRET_KEY --state_bucket STATE_BUCKET --state_key STATE_KEY --db_user DB_USER
    --db_password DB_PASSWORD --api_ssl_certificate_id SSL_CERTIFICATE_ID
"
}


_program_commandLine_optionExists()
{
  case "$optionName" in

    action)
        echo 'yes-argumented'
    ;;

    out_file)
        echo 'yes-argumented'
    ;;

    in_file)
        echo 'yes-argumented'
    ;;

    access_key)
        echo 'yes-argumented'
    ;;

    secret_key)
        echo 'yes-argumented'
    ;;

    state_stor_bucket)
        echo 'yes-argumented'
    ;;

    state_stor_bucket_region)
        echo 'yes-argumented'
    ;;

    state_stor_key)
        echo 'yes-argumented'
    ;;

    db_user)
        echo 'yes-argumented'
    ;;

    db_password)
        echo 'yes-argumented'
    ;;

    api_ssl_certificate_id)
        echo 'yes-argumented'
    ;;

    *)
        echo 'no'
    ;;

  esac
}


_program_commandLine_processOptionWithArgument()
{
    case "$optionName" in
        action)
            run_terraform_action="$optionValue"
        ;;

        out_file)
            run_terraform_out_file="$optionValue"
        ;;

        in_file)
            run_terraform_in_file="$optionValue"
        ;;

        access_key)
            run_terraform_access_key="$optionValue"
        ;;

        secret_key)
            run_terraform_secret_key="$optionValue"
        ;;

        state_stor_bucket)
            run_terraform_state_stor_bucket="$optionValue"
        ;;

        state_stor_bucket_region)
            run_terraform_state_stor_bucket_region="$optionValue"
        ;;

        state_stor_key)
            run_terraform_state_stor_key="$optionValue"
        ;;

        db_user)
            run_terraform_db_user="$optionValue"        ;;

        db_password)
            run_terraform_db_password="$optionValue"
        ;;

        api_ssl_certificate_id)
            run_terraform_api_ssl_certificate_id="$optionValue"
        ;;

        *)
            echo 'no'
        ;;

    esac
}


_program_commandLine_handleNonOptions()
{
    true
}


_program_commandLine_validate()
{
    core_variable_isUnsetOrEmpty "run_terraform_action" && core_exitError $core_commandLine_exitCode_USAGE "Action option is mandatory"
    core_variable_isUnsetOrEmpty "run_terraform_access_key" && core_exitError $core_commandLine_exitCode_USAGE "Access key option is mandatory"
    core_variable_isUnsetOrEmpty "run_terraform_secret_key" && core_exitError $core_commandLine_exitCode_USAGE "Secret key option is mandatory"
    core_variable_isUnsetOrEmpty "run_terraform_state_stor_bucket" && core_exitError $core_commandLine_exitCode_USAGE "Bucket for terraform state option is mandatory"
    core_variable_isUnsetOrEmpty "run_terraform_state_stor_bucket_region" && core_exitError $core_commandLine_exitCode_USAGE "Bucket region for terraform state option is mandatory"
    core_variable_isUnsetOrEmpty "run_terraform_state_stor_key" && core_exitError $core_commandLine_exitCode_USAGE "Key for terraform state option is mandatory"
    core_variable_isUnsetOrEmpty "run_terraform_db_user" && core_exitError $core_commandLine_exitCode_USAGE "db_user option is mandatory"
    core_variable_isUnsetOrEmpty "run_terraform_db_password" && core_exitError $core_commandLine_exitCode_USAGE "db_password is mandatory"
    core_variable_isUnsetOrEmpty "run_terraform_api_ssl_certificate_id" && core_exitError $core_commandLine_exitCode_USAGE "api_ssl_certificate_id IS mandatory"

    case "$run_terraform_action" in
        plan)
            core_variable_isUnsetOrEmpty "run_terraform_in_file" || core_exitError $core_commandLine_exitCode_USAGE "in_file only for apply"
            true
        ;;
        apply)
            core_variable_isUnsetOrEmpty "run_terraform_out_file" || core_exitError $core_commandLine_exitCode_USAGE "out_file only for plan"
            true
        ;;
        *) core_exitError $core_commandLine_exitCode_USAGE "Action can only be plan or apply, got $run_terraform_action" ;;
    esac

    true
}


# Assumes pwd, and so requires this code to be running from this folder
. "$_program_libPath"/shellfire/core/init.functions "$@"
